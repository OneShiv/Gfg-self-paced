{"id":"src/arrays/index.js","dependencies":[{"name":"/project/Gfg-self-paced/package.json","includedInParent":true,"mtime":1665488920511},{"name":"./arrangeAlternative","loc":{"line":1,"column":35,"index":35},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/arrangeAlternative.js"},{"name":"./checkRotatedAndSorted","loc":{"line":2,"column":38,"index":97},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/checkRotatedAndSorted.js"},{"name":"./consecutiveOnes","loc":{"line":3,"column":35,"index":159},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/consecutiveOnes.js"},{"name":"./frequenciesOfElementsArray","loc":{"line":4,"column":42,"index":222},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/frequenciesOfElementsArray.js"},{"name":"./isArraySorted","loc":{"line":5,"column":30,"index":284},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/isArraySorted.js"},{"name":"./largestElement","loc":{"line":6,"column":50,"index":353},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/largestElement.js"},{"name":"./leadersInArray","loc":{"line":7,"column":34,"index":407},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/leadersInArray.js"},{"name":"./leftRotateArray","loc":{"line":8,"column":54,"index":481},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/leftRotateArray.js"},{"name":"./longestOddEvenSubArray","loc":{"line":9,"column":39,"index":541},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/longestOddEvenSubArray.js"},{"name":"./maximumDifference","loc":{"line":13,"column":7,"index":637},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maximumDifference.js"},{"name":"./maxIndex","loc":{"line":14,"column":29,"index":689},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxIndex.js"},{"name":"./maxOccuredINRange","loc":{"line":15,"column":34,"index":737},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxOccuredINRange.js"},{"name":"./maxOddEven","loc":{"line":16,"column":27,"index":787},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxOddEven.js"},{"name":"./maxProfit","loc":{"line":17,"column":59,"index":862},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxProfit.js"},{"name":"./maxSubArraSumSW","loc":{"line":21,"column":7,"index":942},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxSubArraSumSW.js"},{"name":"./maxSubArraySumCircular","loc":{"line":27,"column":7,"index":1086},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxSubArraySumCircular.js"},{"name":"./maxumumSubArraySum","loc":{"line":31,"column":7,"index":1197},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/maxumumSubArraySum.js"},{"name":"./minAdjacentDiffCirc","loc":{"line":32,"column":32,"index":1253},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/minAdjacentDiffCirc.js"},{"name":"./minimumGroupFlips","loc":{"line":33,"column":39,"index":1317},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/minimumGroupFlips.js"},{"name":"./missingNumber","loc":{"line":34,"column":43,"index":1383},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/missingNumber.js"},{"name":"./moveAllZerosToEnd","loc":{"line":35,"column":34,"index":1436},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/moveAllZerosToEnd.js"},{"name":"./removeDuplicatesFromArray","loc":{"line":36,"column":42,"index":1501},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/removeDuplicatesFromArray.js"},{"name":"./reverseArray","loc":{"line":37,"column":29,"index":1561},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/reverseArray.js"},{"name":"./secondLargestElement","loc":{"line":38,"column":32,"index":1611},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/secondLargestElement.js"},{"name":"./subArrayWithGIvenSum","loc":{"line":42,"column":7,"index":1703},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/subArrayWithGIvenSum.js"},{"name":"./tappingRainWater","loc":{"line":43,"column":55,"index":1784},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/tappingRainWater.js"},{"name":"./waveFormation","loc":{"line":44,"column":30,"index":1836},"parent":"/project/Gfg-self-paced/src/arrays/index.js","resolved":"/project/Gfg-self-paced/src/arrays/waveFormation.js"}],"generated":{"js":"\"use strict\";\n\nvar _arrangeAlternative = require(\"./arrangeAlternative\");\nvar _checkRotatedAndSorted = require(\"./checkRotatedAndSorted\");\nvar _consecutiveOnes = require(\"./consecutiveOnes\");\nvar _frequenciesOfElementsArray = require(\"./frequenciesOfElementsArray\");\nvar _isArraySorted = require(\"./isArraySorted\");\nvar _largestElement = require(\"./largestElement\");\nvar _leadersInArray = require(\"./leadersInArray\");\nvar _leftRotateArray = require(\"./leftRotateArray\");\nvar _longestOddEvenSubArray = require(\"./longestOddEvenSubArray\");\nvar _maximumDifference = require(\"./maximumDifference\");\nvar _maxIndex = require(\"./maxIndex\");\nvar _maxOccuredINRange = require(\"./maxOccuredINRange\");\nvar _maxOddEven = require(\"./maxOddEven\");\nvar _maxProfit = require(\"./maxProfit\");\nvar _maxSubArraSumSW = require(\"./maxSubArraSumSW\");\nvar _maxSubArraySumCircular = require(\"./maxSubArraySumCircular\");\nvar _maxumumSubArraySum = require(\"./maxumumSubArraySum\");\nvar _minAdjacentDiffCirc = require(\"./minAdjacentDiffCirc\");\nvar _minimumGroupFlips = require(\"./minimumGroupFlips\");\nvar _missingNumber = require(\"./missingNumber\");\nvar _moveAllZerosToEnd = require(\"./moveAllZerosToEnd\");\nvar _removeDuplicatesFromArray = require(\"./removeDuplicatesFromArray\");\nvar _reverseArray = require(\"./reverseArray\");\nvar _secondLargestElement = require(\"./secondLargestElement\");\nvar _subArrayWithGIvenSum = require(\"./subArrayWithGIvenSum\");\nvar _tappingRainWater = require(\"./tappingRainWater\");\nvar _waveFormation = require(\"./waveFormation\");"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"src/arrays/index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"src/arrays/index.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"src/arrays/index.js","original":{"line":3,"column":0}},{"generated":{"line":6,"column":0},"source":"src/arrays/index.js","original":{"line":4,"column":0}},{"generated":{"line":7,"column":0},"source":"src/arrays/index.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"src/arrays/index.js","original":{"line":6,"column":0}},{"generated":{"line":9,"column":0},"source":"src/arrays/index.js","original":{"line":7,"column":0}},{"generated":{"line":10,"column":0},"source":"src/arrays/index.js","original":{"line":8,"column":0}},{"generated":{"line":11,"column":0},"source":"src/arrays/index.js","original":{"line":9,"column":0}},{"generated":{"line":12,"column":0},"source":"src/arrays/index.js","original":{"line":10,"column":0}},{"generated":{"line":13,"column":0},"source":"src/arrays/index.js","original":{"line":14,"column":0}},{"generated":{"line":14,"column":0},"source":"src/arrays/index.js","original":{"line":15,"column":0}},{"generated":{"line":15,"column":0},"source":"src/arrays/index.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":0},"source":"src/arrays/index.js","original":{"line":17,"column":0}},{"generated":{"line":17,"column":0},"source":"src/arrays/index.js","original":{"line":18,"column":0}},{"generated":{"line":18,"column":0},"source":"src/arrays/index.js","original":{"line":22,"column":0}},{"generated":{"line":19,"column":0},"source":"src/arrays/index.js","original":{"line":28,"column":0}},{"generated":{"line":20,"column":0},"source":"src/arrays/index.js","original":{"line":32,"column":0}},{"generated":{"line":21,"column":0},"source":"src/arrays/index.js","original":{"line":33,"column":0}},{"generated":{"line":22,"column":0},"source":"src/arrays/index.js","original":{"line":34,"column":0}},{"generated":{"line":23,"column":0},"source":"src/arrays/index.js","original":{"line":35,"column":0}},{"generated":{"line":24,"column":0},"source":"src/arrays/index.js","original":{"line":36,"column":0}},{"generated":{"line":25,"column":0},"source":"src/arrays/index.js","original":{"line":37,"column":0}},{"generated":{"line":26,"column":0},"source":"src/arrays/index.js","original":{"line":38,"column":0}},{"generated":{"line":27,"column":0},"source":"src/arrays/index.js","original":{"line":39,"column":0}},{"generated":{"line":28,"column":0},"source":"src/arrays/index.js","original":{"line":43,"column":0}},{"generated":{"line":29,"column":0},"source":"src/arrays/index.js","original":{"line":44,"column":0}}],"sources":{"src/arrays/index.js":"import { arrangeAlternative } from \"./arrangeAlternative\";\nimport { checkRotatedAndSorted } from \"./checkRotatedAndSorted\";\nimport { getConsecutiveOnes } from \"./consecutiveOnes\";\nimport { getFrequenciesSortedArray } from \"./frequenciesOfElementsArray\";\nimport { isSortedArray } from \"./isArraySorted\";\nimport { getLargestElement, largestElement } from \"./largestElement\";\nimport { getLeadersInArray } from \"./leadersInArray\";\nimport { leftRotateArray, naiveLeftRotateArray } from \"./leftRotateArray\";\nimport { longestOddEvenSubarray } from \"./longestOddEvenSubArray\";\nimport {\n  improvedMaximumDiff,\n  maximumDifferenceWithOrder\n} from \"./maximumDifference\";\nimport { maxIndexDiff } from \"./maxIndex\";\nimport { maxOccuredInRange } from \"./maxOccuredINRange\";\nimport { maxEvenOdd } from \"./maxOddEven\";\nimport { maxPro, maxProfitEfficient, maxProfitNaive } from \"./maxProfit\";\nimport {\n  maxSumSubarraySizeK,\n  maxSubArraySumEfficient\n} from \"./maxSubArraSumSW\";\nimport {\n  getMaxSubrraySumCircEfficient,\n  maxSubArrayKadanes,\n  maxSubArraySumCircularNaive,\n  minSubArrayKadanes\n} from \"./maxSubArraySumCircular\";\nimport {\n  maxSubArraySumEfficientKadanes,\n  minSubArraySumEfficientKadanes\n} from \"./maxumumSubArraySum\";\nimport { minAdjacentDiff } from \"./minAdjacentDiffCirc\";\nimport { minFlips, minFlipsBest } from \"./minimumGroupFlips\";\nimport { findMissing, missingNumber } from \"./missingNumber\";\nimport { moveAllZerosToEnd } from \"./moveAllZerosToEnd\";\nimport { removeDuplicatesFromArray } from \"./removeDuplicatesFromArray\";\nimport { reverseArray } from \"./reverseArray\";\nimport { secondLargestEl } from \"./secondLargestElement\";\nimport {\n  getSubArrayWithGivenSum,\n  subArrayWithGivenSum\n} from \"./subArrayWithGIvenSum\";\nimport { rainwaterTrappingGfg, tappingRainWater } from \"./tappingRainWater\";\nimport { waveFormation } from \"./waveFormation\";\n\n/*\nconsole.log(\"P : get index of largest el in array or -1 if not found\");\nconsole.log(getLargestElement([4, 23, 33223, 23, 233, 895]));\nconsole.log(\"---------------------\");\nconsole.log(\"P : get index of second largest el in array or -1 if not found\");\nconsole.log(secondLargestEl([4, 23, 33223, 23, 233, 895]));\nconsole.log(\"---------------------\");\nconsole.log(\n  \"P : if array is sorted return true else false. Non decreasing order is imp ,equlas allowed\"\n);\nconsole.log(isSortedArray([4, 23, 33223]));\nconsole.log(\"---------------------\");\nconsole.log(\"P : reverse Array [1,2,3,4,9]\");\nconsole.log(reverseArray([1, 2, 3, 4, 9]));\nconsole.log(\"---------------------\");\nconsole.log(\n  \"P : remove duplicates from array and return size [1,2,2,3,9,9,3,6,45,6]\"\n);\nconsole.log(removeDuplicatesFromArray([1, 2, 2, 3, 9, 9, 3, 6, 45, 6]));\nconsole.log(\"---------------------\");\nconsole.log(\"P : move zeros to end of aaray [3,0,6,0,5,7,8,0,23,0]\");\nconsole.log(moveAllZerosToEnd([3, 0, 6, 0, 5, 7, 8, 0, 23, 0]));\n\nconsole.log(\"---------------------\");\nconsole.log(\"left rotate array by 1 [1,2,3,4,5]\");\nconsole.log(leftRotateArray([1, 2, 3, 4, 5], 4));\n\nconsole.log(\"---------------------\");\nconsole.log(\"print leaders of array  []\");\nconsole.log(getLeadersInArray([10, 10, 10]));\n\nconsole.log(\"---------------------\");\nconsole.log(\"max diff in order [2,3,10,6,4,8,1]\");\nconsole.log(improvedMaximumDiff([2, 3, 10, 6, 4, 8, 1]));\n\nconsole.log(\"---------------------\");\nconsole.log(\"get frequencies sorted array [1,1,2,3,]\");\nconsole.log(getFrequenciesSortedArray([1, 2]));\n*/\n\n/*\nconsole.log(\"---------------------\");\nconsole.log(\"max profit shares [1,5,3,8,12]\");\nconsole.log(maxProfitNaive([1, 5, 3, 8, 12], 0, 4));\n\nconsole.log(\"---------------------\");\nconsole.log(\"max profit shares [9,2,5,1,13,6]\");\nconsole.log(maxProfitEfficient([9, 2, 5, 1, 13, 6]));\n\nconsole.log(\"---------------------\");\nconsole.log(\"tapping rainwater [3, 0, 0, 2, 0, 4]\");\nconsole.log(\n  \"efficient , self innovation no aux space\",\n  tappingRainWater([3, 0, 0, 2, 0, 4])\n);\nconsole.log(\n  \"GFG way, Theeta N aux space\",\n  rainwaterTrappingGfg([3, 0, 0, 2, 0, 4])\n);\n\nconsole.log(\"---------------------\");\nconsole.log(\"get consecutive ones [0,1,0,1,1,0,1,1,1,1,0,1]\");\nconsole.log(getConsecutiveOnes([0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1]));\nconsole.log(\"[0,0,0]\", getConsecutiveOnes([0, 0, 0]));\nconsole.log(\"[1,1,1]\", getConsecutiveOnes([1, 1, 1]));\n\nconsole.log(\"---------------------\");\nconsole.log(\" max subarry sum [2,3,-8,7,-1,2,3]\");\nconsole.log(maxSubArraySumEfficient([2, 3, -8, 7, -1, 2, 3]));\nconsole.log(\"---------------------\");\nconsole.log(\" longest oddEven subarray [9, 10, 12, 14, 7, 8]\");\nconsole.log(longestOddEvenSubarray([9, 10, 12, 14, 7, 8]));\n\nconsole.log(\"---------------------\");\nconsole.log(\"max sub Array sum circular\");\nconsole.log(maxSubArraySumCircularNaive([3, -4, 5, 6, -8, 7]));\nconsole.log(\n  \"max sub array sum efficient \" + getMaxSubrraySumCircEfficient([-5, -3])\n);\n\n*/\n\n/*\nconsole.log(\"-----CONSECUTIVE BINARY ----------\");\nconsole.log(\"minflips [1,1,0,0,0,1]\");\nconsole.log(minFlipsBest([1, 1, 0, 0, 0, 1]));\n\nconsole.log(\"------ SLIDING WINDOW-----------\");\nconsole.log(\"max SubArraySum  [1,8,30,-5,20,7]\");\nconsole.log(maxSumSubarraySizeK([1, 8, 30, -5, 20, 7], 3));\n\nconsole.log(\"------ SLIDING WINDOW max sub given sum-----------\");\nconsole.log(\"max SubArraySum  with given sum [1,4,20,3,10,5]\");\nconsole.log(subArrayWithGivenSum([1, 4, 20, 3, 10, 5], 33));\nconsole.log(getSubArrayWithGivenSum([1, 4, 20, 3, 10, 5], 33));\n\nconsole.log(\"---- left rotate by k places naive-----\");\nconsole.log(naiveLeftRotateArray([1, 2, 3, 4, 5], 2));\nconsole.log(\"---- left rotate by k places best-----\");\nconsole.log(leftRotateArray([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 3));\n\nconsole.log(\"------ min adjacent diff circular -------\");\nconsole.log(minAdjacentDiff([10, -3, -4, 7, 6, 5, -4, -1]));\n\n*/\n// console.log(\"------ prefix pattern ---------\");\n// console.log(\"Max occured in range\");\n// console.log(maxOccuredInRange([1, 4, 3, 1], [15, 8, 5, 4], 4));\n\n// console.log(waveFormation([2, 4, 7, 8, 9, 10]));\n\n// console.log(\"--------- missing number-----------\");\n// console.log(missingNumber([2, 3, -7, 6, 8, 1, -10, 15], 8));\n\n// console.log(\"----------- alternative arranging------\");\n// console.log(arrangeAlternative([1, 2, 3, 4, 5, 6, 7]));\n\n// console.log(\"----- maxIndex i<=j && a[i]<=a[j] max of j-i ------\");\n// console.log(maxIndexDiff([4, 3, 2, 1], 15));\n\n// console.log(\"---- stock buy sell max profit-----\");\n// let arr = [100, 180, 260, 310, 40, 535, 695];\n// let res = maxPro(arr, 7);\n// console.log(res);\n// let p = 0;\n// for (let i = 0; i < res.length; i++) {\n//   p += arr[res[i][1]] - arr[res[i][0]];\n// }\n// console.log(p);\n// console.log(\"adsa\");\n\n// console.log(\" ----- check sorted and rotated -------\");\n// console.log(checkRotatedAndSorted([10, 20, 30, 14], 4));\n\n// console.log(\"------ max Odd even fsdscd --------\");\n// console.log(maxEvenOdd([1, 3, 5, 2, 4, 6, 8, 9, 11], 9));\n// console.log(maxSubArraySumEfficientKadanes([8, -8, 9, -9, 10, -11, 12]));\n// console.log(minSubArraySumEfficientKadanes([8, -8, 9, -9, 10, -11, 12]));\n\n// function foo(n) {\n//   let i = 0;\n//   let A = [];\n//   A[0] = n;\n//   while (true) {\n//     if (i !== 0 && A[i] === n) {\n//       break;\n//     }\n//     if (A[i] > 0 && i >= 0) {\n//       console.log(\"dasdas\");\n//       A[i + 1] = A[i] - 5;\n//     } else {\n//       console.log(\"---\");\n//       A[i + 1] = A[i] + 5;\n//     }\n//     i++;\n//   }\n//   console.log(A.join(\" \"));\n//   return A;\n// }\n\n// console.log(foo(16));\n"},"lineCount":null}},"error":null,"hash":"9edaeb0f4d46faefa6bc6c0fb6c3d794","cacheData":{"env":{}}}